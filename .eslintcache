[{"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\reportWebVitals.js":"1","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\App.js":"2","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\index.js":"3","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\TestStructure.js":"4","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\Tests.js":"5","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\Header.js":"6","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\TestCases.js":"7","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\TestCaseStructure.js":"8","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\Search.js":"9","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\infoModal.js":"10","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\InfoModal.js":"11"},{"size":362,"mtime":1607822883370,"results":"12","hashOfConfig":"13"},{"size":4225,"mtime":1608334164058,"results":"14","hashOfConfig":"13"},{"size":678,"mtime":1608216856652,"results":"15","hashOfConfig":"13"},{"size":7170,"mtime":1608334936820,"results":"16","hashOfConfig":"13"},{"size":805,"mtime":1608334259479,"results":"17","hashOfConfig":"13"},{"size":883,"mtime":1608334934387,"results":"18","hashOfConfig":"13"},{"size":848,"mtime":1608334653406,"results":"19","hashOfConfig":"13"},{"size":1766,"mtime":1608334707222,"results":"20","hashOfConfig":"13"},{"size":9912,"mtime":1608334899735,"results":"21","hashOfConfig":"13"},{"size":317,"mtime":1608247672642,"results":"22","hashOfConfig":"13"},{"size":3375,"mtime":1608334613289,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1730i9z",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\reportWebVitals.js",[],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\App.js",[],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\index.js",[],["51","52"],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\TestStructure.js",["53","54","55","56","57","58"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport TestCases from './TestCases'\nimport '../../node_modules/font-awesome/css/font-awesome.min.css';\nimport '../App.css';\n\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///                                 TestStructure.js\n  ///   Contains subcomponent for TestCases.js and a small form to update notes\n  //////////////////////////////////////////////////////////////////////////////////////\nclass TestStructure extends Component {\n  state = {\n    testcases: [\n\n    ],\n    noteUpdate: false\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///                                 get-X-Style()\n  ///   Just functions that make it somewhat neater when getting the css style\n  //////////////////////////////////////////////////////////////////////////////////////\n  getStyle = () => {\n    return {\n      paddingTop: '10px',\n      paddingBottom: '0px',\n      borderBottom: '1px solid #222831',\n      background: '#393e46',\n      color: '#eeeeee'\n    }\n\n  }\n\n  getFormStyle = () => {\n    return {\n      paddingTop: '10px',\n      paddingBottom: '10px',\n      paddingLeft: '10px',\n      paddingRight: '10px',\n      background: '#393e46',\n      border: '10px solid #222831',\n      borderRadius: '25px',\n      display: 'flex'\n    }\n\n  }\n\n  getFormVisible = () => {\n    return {\n      paddingLeft: '10px',\n      paddingRight: '10px',\n      paddingBottom: '10px',\n      display: this.props.test.IsOpen ?\n        'block' :\n        'none'\n    }\n\n  }\n\n  getTestCasesStyle = () => {\n    return {\n      background: '#90EE90',\n      border: '10px solid #222831',\n      borderRadius: '25px'\n    }\n\n  }\n\n  getStyleCheck = () => {\n    return {\n      display: this.props.test.Status == \"Fail\" ?\n        'none' :\n        'inline'\n    }\n\n  }\n  getStyleCross = () => {\n    return {\n      display: this.props.test.Status != \"Fail\" ?\n        'none' :\n        'inline'\n    }\n\n  }\n\n  getStyleNote = () => {\n    return {\n      marginTop: '6px',\n      marginRight: '25px',\n      float: 'right',\n      display: this.props.test.Notes == \"\" ?\n        'none' :\n        'inline'\n    }\n\n  }\n\n  getSubmitStyle = () => {\n    return {\n      color: this.state.noteUpdate == true ?\n        '#90EE90' :\n        '#393e46',\n      background: this.state.noteUpdate == true ?\n        '#393e46' :\n        '#EEEEEE'\n    }\n\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///                                 testExpand()\n  ///   Handles the expansion and collapse of the TestStructure, where it would reveal\n  ///   all of its test cases, also unloads unused data when collapsed\n  //////////////////////////////////////////////////////////////////////////////////////\n  testExpand = () => {\n    if (this.props.test.IsOpen) {\n      const data = { id: this.props.test.id }\n      fetch('/hciquerytestcases', {\n        type: 'POST',\n        method: 'POST',\n        headers: {\n          \"content_type\": \"application/json\",\n        },\n        body: JSON.stringify(data)\n      }\n      ).then(res => res.json()).then(data => {\n        data = data.myLines;\n        //only get the last 10 tests\n        //data = data.slice([-10]);\n\n        //reverse it so highest id comes first\n        //data = data.reverse();\n        //console.log(data);\n        //data = JSON.parse(data);\n        this.setState({ testcases: [] });\n        data.forEach((testText) => {\n          const newTestCase = {\n            lid: testText[\"lid\"],\n            contents: testText[\"contents\"],\n            linenumber: testText[\"linenumber\"],\n            status: testText[\"status\"],\n            id: testText[\"id\"]\n          }\n          this.setState({ testcases: [...this.state.testcases, newTestCase] });\n        });\n        //console.log(this.state.testcases);\n        this.props.test.isPopulated = true;\n        this.forceUpdate();\n      });\n    }\n    else if (!this.props.test.IsOpen) {\n      this.setState({ testcases: [] });\n      this.props.test.isPopulated = false;\n      this.forceUpdate();\n    }\n\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///                                 onSubmit()\n  ///   Handles submit event to update the note of a test\n  //////////////////////////////////////////////////////////////////////////////////////\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.setState({ noteUpdate: true });\n    const data = {\n      id: this.props.test.id,\n      notes: document.getElementById(\"N\" + this.props.test.id).value\n    }\n    fetch('/hciupdatenote', {\n      type: 'POST',\n      method: 'POST',\n      headers: {\n        \"content_type\": \"application/json\",\n      },\n      body: JSON.stringify(data)\n    }\n    );\n    this.props.test.Notes = document.getElementById(\"N\" + this.props.test.id).value;\n    setTimeout(function () {\n      this.setState({ noteUpdate: false });\n      this.props.test.IsOpen = !this.props.test.IsOpen;\n      this.testExpand();\n    }.bind(this), 2000);\n  }\n  // only update the component\n  populateNotes = () => {\n    document.getElementById(\"N\" + this.props.test.id).value = this.props.test.Notes;\n  }\n\n  render() {\n\n    //console.log(this.props.test)\n    return (\n      //set on click to call a function instead that displays the other stuff?\n\n      <div style={this.getStyle()}>\n        <p style={{ paddingLeft: '15px', paddingRight: '15px' }} onClick={() => {\n          //alert(this.props.test.id);\n          this.props.test.IsOpen = !this.props.test.IsOpen;\n          //this.forceUpdate();\n          this.testExpand();\n        }}>\n          <i style={this.getStyleCross()} className=\"fa fa-times\"></i>\n          <i style={this.getStyleCheck()} className=\"fa fa-check\"></i>\n          {'     '} {this.props.test.DateTime} | {this.props.test.SerialNumber} | ({this.props.test.DeviceName}, {this.props.test.PartNumber}) <i style={this.getStyleNote()} className=\"fa fa-comment\"></i>\n          {\" \"}\n        </p>\n        <div style={{ paddingLeft: '15px', paddingRight: '15px' }}>\n          {this.props.test.IsOpen && this.props.test.isPopulated ?\n            <React.Fragment>\n              <div style={this.getTestCasesStyle()}>\n                <TestCases testcases={this.state.testcases} />\n              </div>\n              {this.populateNotes()}\n            </React.Fragment>\n\n            :\n            \" \"}\n        </div>\n        <div style={this.getFormVisible()}>\n          <form style={this.getFormStyle()} onSubmit={this.onSubmit}>\n            <p style={{ textAlign: 'center', display: 'block' }}>\n              Notes:\n                  </p>\n            <br />\n            <textarea name=\"testNote\" id={\"N\" + this.props.test.id} style={{ resize: 'none', flex: '1' }} placeholder=\"Notes for correcting test failures\"></textarea>\n\n            <input type=\"submit\" value={this.state.noteUpdate == true ? \"Note Updated\" : \"Update Notes\"} style={this.getSubmitStyle()} />\n          </form>\n        </div>\n      </div>\n\n    )\n  }\n\n\n}\n\n\n\nTestStructure.propTypes = {\n  test: PropTypes.object.isRequired\n}\n\nexport default TestStructure;",["59","60"],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\Tests.js",[],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\Header.js",[],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\TestCases.js",[],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\TestCaseStructure.js",["61","62"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\n\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///                                 TestCaseStructure.js\n  ///   Contains a testcase for its parent test\n  //////////////////////////////////////////////////////////////////////////////////////\nclass TestCaseStructure extends Component {\n\n  //////////////////////////////////////////////////////////////////////////////////////\n  ///                                 get-X-Style()\n  ///   Just functions that make it somewhat neater when getting the css style\n  //////////////////////////////////////////////////////////////////////////////////////\n    getStyle = () => {\n        return {\n            paddingTop: '5px',\n            paddingBottom: '0px',\n            fontSize: '15px',\n            color: this.props.testcase.status == \"Fail\" ?\n                '#393e46' :\n                '#eeeeee',\n            borderBottom: '1px solid #222831',\n            display: 'block',\n            overflow: 'auto',\n            background: this.props.testcase.status == \"Fail\" ?\n                '#f18c8a' :\n                '#393e46'\n        }\n\n    }\n\n\n    getStyleP = () => {\n        return {\n            marginBottom: '8px',\n            paddingLeft: '15px'\n        }\n\n    }\n\n    render() {\n        //console.log(this.props.test)\n        //console.log(this.props.testcase);\n        return (\n            <div style={this.getStyle()}>\n                <p style={this.getStyleP()}>\n                    {'     '}{this.props.testcase.contents}\n                </p>\n            </div>\n\n        )\n    }\n\n}\n\nTestCaseStructure.propTypes = {\n    testcase: PropTypes.object.isRequired\n}\n\nexport default TestCaseStructure;","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\Search.js",[],"C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\infoModal.js",["63","64"],"import React,{ Component } from 'react';\r\n\r\nclass InfoModal extends Component {\r\n    render() {\r\n        if(!this.props.showModal){\r\n            return null;\r\n        }\r\n        return(\r\n            <div>\r\n                Hello Modal\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default infoMoInfoModaldal;","C:\\Users\\Z-PC\\Desktop\\Random Files\\Web Development Learning\\Web Dev Work\\marble testing site\\hci-app\\src\\components\\InfoModal.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":72,"column":39,"nodeType":"71","messageId":"72","endLine":72,"endColumn":41},{"ruleId":"69","severity":1,"message":"73","line":80,"column":39,"nodeType":"71","messageId":"72","endLine":80,"endColumn":41},{"ruleId":"69","severity":1,"message":"70","line":92,"column":38,"nodeType":"71","messageId":"72","endLine":92,"endColumn":40},{"ruleId":"69","severity":1,"message":"70","line":101,"column":36,"nodeType":"71","messageId":"72","endLine":101,"endColumn":38},{"ruleId":"69","severity":1,"message":"70","line":104,"column":41,"nodeType":"71","messageId":"72","endLine":104,"endColumn":43},{"ruleId":"69","severity":1,"message":"70","line":230,"column":63,"nodeType":"71","messageId":"72","endLine":230,"endColumn":65},{"ruleId":"65","replacedBy":"74"},{"ruleId":"67","replacedBy":"75"},{"ruleId":"69","severity":1,"message":"70","line":20,"column":47,"nodeType":"71","messageId":"72","endLine":20,"endColumn":49},{"ruleId":"69","severity":1,"message":"70","line":26,"column":52,"nodeType":"71","messageId":"72","endLine":26,"endColumn":54},{"ruleId":"76","severity":1,"message":"77","line":3,"column":7,"nodeType":"78","messageId":"79","endLine":3,"endColumn":16},{"ruleId":"80","severity":2,"message":"81","line":18,"column":16,"nodeType":"78","messageId":"82","endLine":18,"endColumn":34},"no-native-reassign",["83"],"no-negated-in-lhs",["84"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["83"],["84"],"no-unused-vars","'InfoModal' is defined but never used.","Identifier","unusedVar","no-undef","'infoMoInfoModaldal' is not defined.","undef","no-global-assign","no-unsafe-negation"]